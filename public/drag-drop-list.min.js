function Vector2D(t, e) { return this._x = t || 0, this._y = e || 0, { X: t => void 0 !== t ? this._x = t : this._x, Y: t => void 0 !== t ? this._y = t : this._y, adds: (t, e) => { this._x += t, this._y += e }, div: t => { this._x /= t, this._y /= t }, toString: () => `X:${this._x} - Y:${this._y}` } } Vector2D.diff = ((t, e) => new Vector2D(t.X() - e.X(), t.Y() - e.Y())); const DragDropItem = function({ parent: t, caption: e }) { const n = Date.now() * Math.random(); let o = document.createElement("li"), i = document.createElement("div"), d = document.createElement("button"), r = document.createElement("div"), s = document.createElement("div"), l = document.createElement("div"); d.innerHTML = "â‡…", o.classList.add("dragable-item"), i.classList.add("dragable-group"), d.classList.add("dragable-btn"), l.classList.add("dragdrop-item"), r.classList.add("top-space"), s.classList.add("bottom-sensor"), o.appendChild(r), o.appendChild(i), i.appendChild(d), i.appendChild(l), o.appendChild(s); let a = !1, c = { x: 0, y: 0 }; const p = t => ("string" == typeof t && (l.innerHTML = t), l.innerHTML), m = () => { r.style.height = "0px" }, u = () => { s.style.height = "0px" }; p(e), (() => { let e = null, n = null, i = null, r = { x: 0, y: 0 }; const s = t => { r.x = t.clientX - i.X(), r.y = t.clientY - i.Y(), o.style.left = `${r.x}px`, o.style.top = `${r.y}px` }, l = n => { t.drag_movement(g), s(n), c.x = n.clientX - e.X(), c.y = n.clientY - e.Y() }; d.onmousedown = (d => { a || (o.style.zIndex = 1e3, e = new Vector2D(d.clientX, d.clientY), n = new Vector2D(o.getBoundingClientRect().left, o.getBoundingClientRect().top), i = Vector2D.diff(e, n), document.body.style.userSelect = "none", s(d), o.style.position = "fixed", a = !0, t.drag_movement(g), document.addEventListener("mousemove", l)) }), d.onmouseup = (e => { a = !1, document.removeEventListener("mousemove", l), t.drop() }) })(); const g = { id: n, item: o, space: r, content_bbox: l, content: p, expand_top_sensor: () => { r.style.height = "15px" }, contract_top_sensor: m, expand_bottom_sensor: () => { s.style.height = "15px" }, contract_bottom_sensor: u, drop: () => { o.style.userSelect = "auto", m(), u(), o.style.position = "initial", document.body.style.userSelect = "initial" }, dir: () => ({ x: c.x / Math.abs(c.x), y: c.y / Math.abs(c.y) }), rect: () => o.getBoundingClientRect() }; return void 0 !== t && t.add_child(g), g }, DragDropContainer = function({ parent: t, onChange: e }) { let n = document.createElement("ul"), o = "", i = -1, d = -1; if (void 0 === t) return; "object" == typeof t && t.appendChild(n); let r = []; return { container: n, list: () => r, add_child: t => { void 0 !== t && (n.appendChild(t.item), r.push(t)) }, drag_movement: t => { if (void 0 === t) return; t.item.style.userSelect = "none"; let e = t.item.getBoundingClientRect(); e.vmiddle = (e.bottom + e.top) / 2; for (let n in r) { n = parseInt(n); let d = r[n]; if (d.id === t.id) { i = parseInt(n), o = t.id; continue } d.item.style.userSelect = "none"; let s = d.item.getBoundingClientRect(); s.vmiddle = (s.bottom + s.top) / 2, d.contract_top_sensor(), d.contract_bottom_sensor(), e.bottom > s.top && e.bottom < s.bottom && e.vmiddle < s.vmiddle && d.expand_top_sensor(), e.top > s.top && e.top < s.bottom && e.vmiddle > s.vmiddle && d.expand_bottom_sensor() } }, drop: t => { let n = []; for (let t of r) n.push(t); for (let t = 0; t < n.length; t++)for (let e = t + 1; e < n.length; e++) { let o = n[t].rect(), i = n[e].rect(); o.top + 15 > i.top && (aux = n[e], n[e] = n[t], n[t] = aux) } for (let t in n) { const e = n[t]; e.id === o && (d = parseInt(t)), e.drop() } "function" == typeof e && e({ original: r, modified: n, origin: i, target: d }), i = -1, d = -1 } } }, DragDropList = function({ name: t, root: e, items: n, css: o, onChange: i, onLoad: d }) { "string" == typeof e && (e = document.getElementById(e)); const r = `${e.id} `, s = new DragDropContainer({ parent: e, onChange: i, onLoad: d }), l = document.createElement("style"); if (e.appendChild(l), l.innerHTML = `\n\t#${r} .dragable-item{\n\t\tlist-style:none;\n\t}\n\t#${r} .dragable-group{\n\t\tdisplay:flex;\n\t}\n\t#${r} .dragable-btn{\n\t    border: 0;\n\t\tbackground-color: rgba(255, 255, 255, 0.8);\n\t\tfont-size: 13pt;\n\t\tcursor: pointer;\n\t\twidth: 30px;\n\t}\n\t#${r} .top-space{\n\t\ttransition: all 0.2s;\n\t\tbackground-color: #EEE;\n\t}\n\t#${r} .bottom-sensor{\n\t\ttransition: all 0.2s;\n\t\tbackground-color: #EEE;\n\t}\n\t#${r} .dragdrop-item\n\t{\n\t\twidth: calc(100% - 30px);\n\t}\n\t${o || ""} `, Array.isArray(n)) for (let t of n) new DragDropItem({ parent: s, caption: t.html }); "function" == typeof d && d({ target: s.container, items: s.list() }) };
